#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NÂ≠óÂõûÊí§Ë®äËôüÂåØÂá∫Â∑•ÂÖ∑
ÂåØÂá∫ÊéÉÊèèÁµêÊûúÁÇ∫CSVÊ†ºÂºèÔºåÊåâCÈªûÊó•ÊúüÊéíÂ∫è
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))
from n_pattern_detector import NPatternDetector

import pandas as pd
import sqlite3
from datetime import datetime
import csv

# ËÇ°Á•®ÂêçÁ®±Â∞çÊáâË°® (Â∏∏Ë¶ãÁöÑËÇ°Á•®)
STOCK_NAMES = {
    '1101': 'Âè∞Ê≥•',
    '1102': '‰∫ûÊ≥•', 
    '1108': 'Âπ∏Á¶è',
    '1213': 'Â§ßÈ£≤',
    '1215': 'ÂçúËúÇ',
    '1304': 'Âè∞ËÅö',
    '1305': 'ËèØÂ§è',
    '1326': 'Âè∞Âåñ',
    '1440': 'ÂçóÁ¥°',
    '1476': 'ÂÑíÈ¥ª',
    '1773': 'Âãù‰∏Ä',
    '1789': 'Á•ûÈöÜ',
    '2032': 'Êñ∞Èãº',
    '2033': '‰Ω≥Â§ß',
    '2204': '‰∏≠ËèØ',
    '2207': 'ÂíåÊ≥∞Ëªä',
    '2227': 'Ë£ïÊó•Ëªä',
    '2301': 'ÂÖâÂØ∂Áßë',
    '2303': 'ËÅØÈõª',
    '2308': 'Âè∞ÈÅîÈõª',
    '2317': 'È¥ªÊµ∑',
    '2327': 'ÂúãÂ∑®',
    '2329': 'ËèØÁ¢©',
    '2330': 'Âè∞Á©çÈõª',
    '2337': 'Êº¢Âîê',
    '2344': 'ËèØÈÇ¶Èõª',
    '2345': 'Êô∫ÈÇ¶',
    '2351': 'È†ÜÂæ∑',
    '2352': '‰Ω≥‰∏ñÈÅî',
    '2355': 'Êï¨Èµ¨',
    '2360': 'Ëá¥ËåÇ',
    '2368': 'ÈáëÂÉèÈõª',
    '2369': 'Ëè±Áîü',
    '2374': '‰Ω≥ËÉΩ',
    '2375': 'Êô∫ÂØ∂',
    '2376': 'ÊäÄÂòâ',
    '2379': 'ÁëûÊò±',
    '2380': 'ËôπÂÖâ',
    '2382': 'Âª£ÈÅî',
    '2395': 'Á†îËèØ',
    '2408': 'Âçó‰∫ûÁßë',
    '2409': 'ÂèãÈÅî',
    '2454': 'ËÅØÁôºÁßë',
    '2501': 'ÂúãÂª∫',
    '2505': 'ÂúãÊèö',
    '2506': 'Â§™Ë®≠',
    '2511': 'Â§™Â≠ê',
    '2515': '‰∏≠Â∑•',
    '2516': 'Êñ∞Âª∫',
    '2520': 'ÂÜ†Âæ∑',
    '2524': '‰∫¨Âüé',
    '2809': '‰∫¨ÂüéÈäÄ',
    '2820': 'ËèØÁ•®',
    '2832': 'Âè∞Áî¢',
    '2850': 'Êñ∞Áî¢',
    '2855': 'Áµ±‰∏ÄË≠â',
    '2867': '‰∏âÂïÜÂ£Ω',
    '3481': 'Áæ§Ââµ',
    '4966': 'Ë≠úÁëû-KY',
    '4967': 'ÂçÅÈäì',
    '5471': 'ÊùæÁø∞',
    '5483': '‰∏≠ÁæéÊô∂',
    '5525': 'È†ÜÂ§©',
    '6442': 'ÂÖâËÅñ',
    '6451': 'Ë®äËäØ-KY',
    '6456': 'GIS-KY',
    '6488': 'Áí∞ÁêÉÊô∂',
    '6525': 'Êç∑Êïè-KY',
    '6531': 'ÊÑõÊôÆ',
    '8027': 'Èà¶Êòá'
}

def get_stock_name(stock_id):
    """ÂèñÂæóËÇ°Á•®ÂêçÁ®±ÔºåÂ¶ÇÊûúÊ≤íÊúâÂ∞çÊáâÂâáËøîÂõûËÇ°Á•®‰ª£Ëôü"""
    return STOCK_NAMES.get(stock_id, stock_id)

def scan_and_export_signals():
    """ÊéÉÊèèÂ∏ÇÂ†¥‰∏¶ÂåØÂá∫Ë®äËôüÁÇ∫CSV"""
    print("üöÄ ÊéÉÊèèNÂ≠óÂõûÊí§Ë®äËôü‰∏¶ÂåØÂá∫CSV")
    print("="*50)
    
    # ‰ΩøÁî®ÊúÄÂÑ™ÂåñÂèÉÊï∏ÈÖçÁΩÆ
    detector = NPatternDetector(
        lookback_bars=60,
        zigzag_change_pct=0.015,  # 1.5% ZigZagÊïèÊÑüÂ∫¶
        min_leg_pct=0.04,         # 4% ÊúÄÂ∞èÊ≥¢ÊÆµ
        retr_min=0.20,            # 20% ÊúÄÂ∞èÂõûÊí§
        retr_max=0.80,            # 80% ÊúÄÂ§ßÂõûÊí§
        c_tolerance=0.00,         # C‰∏çÂèØÁ†¥A
        min_bars_ab=1,            # ABÊúÄÂ∞ë1Â§©
        max_bars_ab=80,           # ABÊúÄÂ§ö80Â§©
        min_bars_bc=1,            # BCÊúÄÂ∞ë1Â§©
        max_bars_bc=50,           # BCÊúÄÂ§ö50Â§©
        volume_threshold=1.0      # ÈáèËÉΩÈñÄÊ™ª1.0
    )
    
    # Áç≤ÂèñËÇ°Á•®Ê∏ÖÂñÆÂíåÊéÉÊèè
    signals = []
    conn = sqlite3.connect('data/cleaned/taiwan_stocks_cleaned.db')
    
    stock_query = """
    SELECT DISTINCT stock_id, COUNT(*) as record_count
    FROM daily_prices
    GROUP BY stock_id
    HAVING COUNT(*) >= 60
    ORDER BY stock_id
    """
    
    stock_result = pd.read_sql_query(stock_query, conn)
    all_stocks = stock_result['stock_id'].tolist()
    
    print(f"ÈñãÂßãÊéÉÊèè {len(all_stocks)} Ê™îËÇ°Á•®...")
    
    for i, stock_id in enumerate(all_stocks):
        if i % 20 == 0:
            print(f"ÈÄ≤Â∫¶: {i}/{len(all_stocks)} ({i/len(all_stocks)*100:.1f}%)")
        
        try:
            query = """
            SELECT date, open, high, low, close, volume
            FROM daily_prices 
            WHERE stock_id = ?
            ORDER BY date
            """
            df = pd.read_sql_query(query, conn, params=(stock_id,))
            
            if len(df) < 60:
                continue
            
            # Ê™¢Ê∏¨NÂ≠óÂΩ¢ÊÖã
            signal = detector.detect_n_pattern(df, stock_id)
            if signal:
                signals.append(signal)
                print(f"‚úÖ {stock_id}: {signal.score}ÂàÜ")
        
        except Exception as e:
            continue
    
    conn.close()
    
    if not signals:
        print("‚ùå Êú™ÁôºÁèæÁ¨¶ÂêàÊ¢ù‰ª∂ÁöÑNÂ≠óÂõûÊí§Ë®äËôü")
        return
    
    # ÊåâCÈªûÊó•ÊúüÊéíÂ∫èÔºàË∂äÊé•Ëøë‰ªäÂ§©Ë∂äÂâçÈù¢Ôºâ
    sorted_signals = sorted(signals, key=lambda s: s.C_date, reverse=True)
    
    print(f"\nüìä ÂÖ±ÁôºÁèæ {len(sorted_signals)} ÂÄãË®äËôüÔºåÈñãÂßãÂåØÂá∫...")
    
    # Ê∫ñÂÇôCSVË≥áÊñô
    csv_data = []
    
    for signal in sorted_signals:
        # Ë®àÁÆóÈ°çÂ§ñÂèÉÊï∏
        rise_pct = signal.rise_pct * 100  # ËΩâÊèõÁÇ∫ÁôæÂàÜÊØî
        retr_pct = signal.retr_pct * 100  # ËΩâÊèõÁÇ∫ÁôæÂàÜÊØî
        
        # Ë®àÁÆóÊôÇÈñìÈñìË∑ù
        from datetime import datetime
        A_dt = datetime.strptime(signal.A_date, '%Y-%m-%d')
        B_dt = datetime.strptime(signal.B_date, '%Y-%m-%d') 
        C_dt = datetime.strptime(signal.C_date, '%Y-%m-%d')
        signal_dt = datetime.strptime(signal.signal_date, '%Y-%m-%d')
        
        days_AB = (B_dt - A_dt).days
        days_BC = (C_dt - B_dt).days
        days_C_to_signal = (signal_dt - C_dt).days
        
        row = [
            signal.stock_id,                    # ËÇ°Á•®‰ª£Ëôü
            get_stock_name(signal.stock_id),    # ËÇ°Á•®ÂêçÁ®±
            signal.score,                       # Á∂úÂêàË©ïÂàÜ
            signal.A_date,                      # AÈªûÊó•Êúü
            signal.A_price,                     # AÈªûÂÉπÊ†º
            signal.B_date,                      # BÈªûÊó•Êúü
            signal.B_price,                     # BÈªûÂÉπÊ†º
            signal.C_date,                      # CÈªûÊó•Êúü
            signal.C_price,                     # CÈªûÂÉπÊ†º
            signal.signal_date,                 # Ë®äËôüÊó•Êúü
            f"{rise_pct:.2f}%",                # ‰∏äÊº≤ÂπÖÂ∫¶
            f"{retr_pct:.1f}%",               # ÂõûÊí§ÊØî‰æã
            days_AB,                           # ABÊÆµÂ§©Êï∏
            days_BC,                           # BCÊÆµÂ§©Êï∏
            days_C_to_signal,                  # CÂà∞Ë®äËôüÂ§©Êï∏
            signal.rsi14,                      # RSI14
            signal.ema5,                       # EMA5
            signal.ema20,                      # EMA20
            signal.volume_ratio,               # ÈáèÊØî
            "ÊòØ" if signal.trigger_break_yesterday_high else "Âê¶",    # Á™ÅÁ†¥Êò®È´ò
            "ÊòØ" if signal.trigger_ema5_volume else "Âê¶",             # EMA5ÈáèÂ¢û
            "ÊòØ" if signal.trigger_rsi_strong else "Âê¶",              # RSIÂº∑Âã¢
            signal.score_breakdown.get('retracement', 0),            # ÂõûÊí§Ë©ïÂàÜ
            signal.score_breakdown.get('volume', 0),                 # ÈáèËÉΩË©ïÂàÜ
            signal.score_breakdown.get('early_entry', 0),            # Êó©ÈÄ≤Ë©ïÂàÜ
            signal.score_breakdown.get('moving_average', 0),         # ÂùáÁ∑öË©ïÂàÜ
            signal.score_breakdown.get('health', 0),                 # ÂÅ•Â∫∑Ë©ïÂàÜ
        ]
        csv_data.append(row)
    
    # ÂåØÂá∫CSV
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"n_pattern_signals_{timestamp}.csv"
    
    headers = [
        'ËÇ°Á•®‰ª£Ëôü', 'ËÇ°Á•®ÂêçÁ®±', 'Á∂úÂêàË©ïÂàÜ',
        'AÈªûÊó•Êúü', 'AÈªûÂÉπÊ†º', 'BÈªûÊó•Êúü', 'BÈªûÂÉπÊ†º', 'CÈªûÊó•Êúü', 'CÈªûÂÉπÊ†º', 'Ë®äËôüÊó•Êúü',
        '‰∏äÊº≤ÂπÖÂ∫¶', 'ÂõûÊí§ÊØî‰æã', 'ABÊÆµÂ§©Êï∏', 'BCÊÆµÂ§©Êï∏', 'CÂà∞Ë®äËôüÂ§©Êï∏',
        'RSI14', 'EMA5', 'EMA20', 'ÈáèÊØî',
        'Á™ÅÁ†¥Êò®È´ò', 'EMA5ÈáèÂ¢û', 'RSIÂº∑Âã¢',
        'ÂõûÊí§Ë©ïÂàÜ', 'ÈáèËÉΩË©ïÂàÜ', 'Êó©ÈÄ≤Ë©ïÂàÜ', 'ÂùáÁ∑öË©ïÂàÜ', 'ÂÅ•Â∫∑Ë©ïÂàÜ'
    ]
    
    with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(headers)
        writer.writerows(csv_data)
    
    print(f"‚úÖ ÊàêÂäüÂåØÂá∫ {len(csv_data)} Á≠ÜË®äËôüËá≥ {filename}")
    print(f"üóÇÔ∏è Ê™îÊ°à‰ΩçÁΩÆ: {os.path.abspath(filename)}")
    
    # È°ØÁ§∫Ââç5Á≠ÜÈ†êË¶Ω
    print(f"\nüìã Ââç5Á≠ÜË®äËôüÈ†êË¶Ω (ÊåâCÈªûÊó•ÊúüÊéíÂ∫è):")
    print("-" * 100)
    print(f"{'ËÇ°Á•®':<6} {'ÂêçÁ®±':<8} {'Ë©ïÂàÜ':<4} {'CÈªûÊó•Êúü':<12} {'Ë®äËôüÊó•Êúü':<12} {'Êº≤ÂπÖ':<8} {'ÂõûÊí§':<8}")
    print("-" * 100)
    
    for i, signal in enumerate(sorted_signals[:5]):
        stock_name = get_stock_name(signal.stock_id)
        print(f"{signal.stock_id:<6} {stock_name:<8} {signal.score:<4} {signal.C_date:<12} {signal.signal_date:<12} {signal.rise_pct:.1%}   {signal.retr_pct:.1%}")
    
    print(f"\nüéâ ÂåØÂá∫ÂÆåÊàêÔºÅÊ™îÊ°àÔºö{filename}")

if __name__ == "__main__":
    scan_and_export_signals()